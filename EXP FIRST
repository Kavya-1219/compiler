#include <stdio.h>
#include <ctype.h>
#include <string.h>

int n;
char productions[10][10];
char firstSets[10][10];

void findFirst(char, int, int);
void addToFirstSet(char, char);

int main() {
    int i, j;
    char ch;
    printf("Enter the number of productions: ");
    scanf("%d", &n);
    printf("Enter the productions (E.g., S->AB):\n");
    for (i = 0; i < n; i++) {
        scanf("%s", productions[i]);
    }

    for (i = 0; i < n; i++) {
        char symbol = productions[i][0];
        findFirst(symbol, 0, 0);
    }

    for (i = 0; i < n; i++) {
        char symbol = productions[i][0];
        printf("First(%c) = { ", symbol);
        for (j = 0; firstSets[symbol - 'A'][j] != '\0'; j++) {
            printf("%c ", firstSets[symbol - 'A'][j]);
        }
        printf("}\n");
    }
    return 0;
}

void findFirst(char symbol, int productionIndex, int symbolIndex) {
    int i, j;

    if (!isupper(symbol)) {
        addToFirstSet(symbol, symbol);
        return;
    }

    for (i = 0; i < n; i++) {
        if (productions[i][0] == symbol) {
            if (productions[i][3] == '#') {
                addToFirstSet(symbol, '#');
            } else {
                for (j = 3; productions[i][j] != '\0'; j++) {
                    if (!isupper(productions[i][j])) {
                        addToFirstSet(symbol, productions[i][j]);
                        break;
                    } else {
                        findFirst(productions[i][j], i, j);
                        int k;
                        int flag = 0;
                        for (k = 0; firstSets[productions[i][j] - 'A'][k] != '\0'; k++) {
                            if (firstSets[productions[i][j] - 'A'][k] == '#') {
                                flag = 1;
                            } else {
                                addToFirstSet(symbol, firstSets[productions[i][j] - 'A'][k]);
                            }
                        }
                        if (!flag)
                            break;
                    }
                }
            }
        }
    }
}

void addToFirstSet(char symbol, char first) {
    int i;
    for (i = 0; firstSets[symbol - 'A'][i] != '\0'; i++) {
        if (firstSets[symbol - 'A'][i] == first)
            return;
    }
    firstSets[symbol - 'A'][i] = first;
    firstSets[symbol - 'A'][i + 1] = '\0';
}
